name: Build, push and deploy Docker image

on:
  workflow_dispatch:
  push:
    branches: [master, develop]
  release:
    types: [created]
  pull_request:
    types: [labeled, synchronize]


# Enables BuildKit
env:
  DOCKER_BUILDKIT: 1
  # Workadventure env file
  ACME_EMAIL: ${{ secrets.ACME_EMAIL }}
  ADMIN_API_TOKEN: ${{ secrets.ADMIN_API_TOKEN }}
  DEBUG_MODE: ${{ secrets.DEBUG_MODE }}
  DISABLE_NOTIFICATIONS: ${{ secrets.DISABLE_NOTIFICATIONS }}
  JITSI_ISS: ${{ secrets.JITSI_ISS }}
  JITSI_PRIVATE_MODE: ${{ secrets.JITSI_PRIVATE_MODE }}
  JITSI_URL: ${{ secrets.JITSI_URL }}
  MAX_PER_GROUP: ${{ secrets.MAX_PER_GROUP }}
  MAX_USERNAME_LENGTH: ${{ secrets.MAX_USERNAME_LENGTH }}
  SECRET_JITSI_KEY: ${{ secrets.SECRET_JITSI_KEY }}
  SKIP_RENDER_OPTIMIZATIONS: ${{ secrets.SKIP_RENDER_OPTIMIZATIONS }}
  START_ROOM_URL: ${{ secrets.START_ROOM_URL }}
  TURN_STATIC_AUTH_SECRET: ${{ secrets.TURN_STATIC_AUTH_SECRET }}
  WEBEX_CLIENT_ID: ${{ secrets.WEBEX_CLIENT_ID }}
  WEBEX_CLIENT_SECRET: ${{ secrets.WEBEX_CLIENT_SECRET }}
  WEBEX_GLOBAL_SPACE_ID: ${{ secrets.WEBEX_GLOBAL_SPACE_ID }}
  WEBEX_REDIRECT_URL: ${{ secrets.WEBEX_REDIRECT_URL }}
  OPID_CLIENT_ID: ${{ secrets.OPID_CLIENT_ID }}
  OPID_CLIENT_ISSUER: ${{ secrets.OPID_CLIENT_ISSUER }}
  OPID_CLIENT_SECRET: ${{ secrets.OPID_CLIENT_SECRET }}
  CONTACT_URL: ${{ secrets.CONTACT_URL }}

jobs:

  make-env-file:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    runs-on: ubuntu-latest
    steps:
      - name: Write env variables to file
        run: |
            echo "ACME_EMAIL=`echo $ACME_EMAIL`\n" >> .env
            echo "ADMIN_API_TOKEN=`echo $ADMIN_API_TOKEN`\n" >> .env
            echo "DEBUG_MODE=`echo $DEBUG_MODE`\n" >> .env
            echo "DISABLE_NOTIFICATIONS=`echo $DISABLE_NOTIFICATIONS`\n" >> .env
            echo "JITSI_ISS=`echo $JITSI_ISS`\n" >> .env
            echo "JITSI_PRIVATE_MODE=`echo $JITSI_PRIVATE_MODE`\n" >> .env
            echo "JITSI_URL=`echo $JITSI_URL`\n" >> .env
            echo "MAX_PER_GROUP=`echo $MAX_PER_GROUP`\n" >> .env
            echo "MAX_USERNAME_LENGTH=`echo $MAX_USERNAME_LENGTH`\n" >> .env
            echo "SECRET_JITSI_KEY=`echo $SECRET_JITSI_KEY`\n" >> .env
            echo "SKIP_RENDER_OPTIMIZATIONS=`echo $SKIP_RENDER_OPTIMIZATIONS`\n" >> .env
            echo "START_ROOM_URL=`echo $START_ROOM_URL`\n" >> .env
            echo "TURN_STATIC_AUTH_SECRET=`echo $TURN_STATIC_AUTH_SECRET`\n" >> .env
            echo "WEBEX_CLIENT_ID=`echo $WEBEX_CLIENT_ID`\n" >> .env
            echo "WEBEX_CLIENT_SECRET=`echo $WEBEX_CLIENT_SECRET`\n" >> .env
            echo "WEBEX_GLOBAL_SPACE_ID=`echo $WEBEX_GLOBAL_SPACE_ID`\n" >> .env
            echo "WEBEX_REDIRECT_URL=`echo $WEBEX_REDIRECT_URL`\n" >> .env
            echo "OPID_CLIENT_ID=`echo $OPID_CLIENT_ID`\n" >> .env
            echo "OPID_CLIENT_ISSUER=`echo $OPID_CLIENT_ISSUER`\n" >> .env
            echo "OPID_CLIENT_SECRET=`echo $OPID_CLIENT_SECRET`\n" >> .env

  build-front:
    needs:
      - make-env-file
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2


      # Create a slugified value of the branch
      - uses: rlespinasse/github-slug-action@3.1.0

      - name: "Build and push front image"
        uses: docker/build-push-action@v1
        with:
          dockerfile: front/Dockerfile
          path: ./
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}
          repository: iits/workadventure-front
          tags: ${{ env.GITHUB_SHA_SHORT }},${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }},${{ github.sha }}
          add_git_labels: true

  build-back:
    needs:
      - make-env-file
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # Create a slugified value of the branch
      - uses: rlespinasse/github-slug-action@3.1.0

      - name: "Build and push back image"
        uses: docker/build-push-action@v1
        with:
          dockerfile: back/Dockerfile
          path: ./
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}
          repository: iits/workadventure-back
          tags: ${{ env.GITHUB_SHA_SHORT }},${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }},${{ github.sha }}
          add_git_labels: true

  build-pusher:
    needs:
      - make-env-file
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # Create a slugified value of the branch
      - uses: rlespinasse/github-slug-action@3.1.0

      - name: "Build and push back image"
        uses: docker/build-push-action@v1
        with:
          dockerfile: pusher/Dockerfile
          path: ./
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}
          repository: iits/workadventure-pusher
          tags: ${{ env.GITHUB_SHA_SHORT }},${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }},${{ github.sha }}
          add_git_labels: true

  build-uploader:
    needs:
      - make-env-file
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # Create a slugified value of the branch
      - uses: rlespinasse/github-slug-action@3.1.0

      - name: "Build and push back image"
        uses: docker/build-push-action@v1
        with:
          dockerfile: uploader/Dockerfile
          path: ./
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}
          repository: iits/workadventure-uploader
          tags: ${{ env.GITHUB_SHA_SHORT }},${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }},${{ github.sha }}
          add_git_labels: true

  build-maps:
    needs:
      - make-env-file
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v2


      # Create a slugified value of the branch
      - uses: rlespinasse/github-slug-action@3.1.0

      - name: "Build and push front image"
        uses: docker/build-push-action@v1
        with:
          dockerfile: maps/Dockerfile
          path: maps/
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_DEPLOY_TOKEN }}
          repository: iits/workadventure-maps
          tags: ${{ env.GITHUB_SHA_SHORT }},${{ github.event_name == 'pull_request' && env.GITHUB_HEAD_REF_SLUG || env.GITHUB_REF_SLUG }},${{ github.sha }}
          add_git_labels: true

  deploy:
    needs:
      - build-front
      - build-back
      - build-pusher
      - build-maps
      - build-uploader
    runs-on: ubuntu-latest

    steps:
      # iits deployment
      - name: Check out iizs argocd azure
        uses: actions/checkout@master
        with:
          repository: iits-consulting/azure-charts
          token: ${{ secrets.ARGO_CD_WITH_DEPLOYMENT_TOKEN }}
      - name: Push new Git Version
        env:
          APP: "workadventure"
          CI_ENVIRONMENT_NAME: "azure"
        run: |
          ARGOCD_PROJECT_NAME=azure-charts
          APP=$(echo "${PWD##*/}")

          ls
          cd stages/playground/azure-charts/helm-charts/$APP

          printf "helm:\n  parameters:\n  - name: image.tag\n    value: ${{ github.sha }}" > .argocd-source-$APP.yaml

          git config user.email "github@iits-consulting.de"
          git config user.name "Github"
          git add .
          git commit -m "$CI_ENVIRONMENT_NAME: $APP updated to ${{ github.sha }}"
          git push
